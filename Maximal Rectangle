public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length==0) return 0;
        int[] height = new int[matrix[0].length];
        for(int j=0; j<height.length; j++){
            height[j] = matrix[0][j]-'0';
        }
        int re = largestRectangleArea(height);
        for(int i=1; i<matrix.length; i++){
            for(int j=0; j<height.length; j++){
                height[j] = matrix[i][j] == '0' ? 0 : height[j]+1;
            }
            re = Math.max(re, largestRectangleArea(height));
        }
        return re;
    }
    
    public int largestRectangleArea(int[] height) {
        int re = 0;
        Stack<Integer> stack = new Stack<Integer>();  //store the index of the height, not height itself
        for(int i=0; i<=height.length; i++){
            int h = (i == height.length ? 0 : height[i]);
            if(stack.isEmpty() || h >= height[stack.peek()]){
                stack.push(i);
            }else{
                int index = stack.pop();
                re = Math.max(re, height[index]*(stack.isEmpty() ? i: i-1-stack.peek()));
                i--;
            }
        }
        return re;
    }
}
