public class Solution {
    public boolean search(int[] nums, int target) {
        if(nums==null)  return false;
        int start =0, end = nums.length-1;
         while(start<=end)
        {
        	int mid = (start+end)/2;
        	if(nums[mid]==target) return true;
        	//the idea is 'one half of the array is sorted and can use binary search to it'
        	if(nums[start]<nums[mid])  //the left side is sorted
        	{
        		if(nums[start]<=target &&target<nums[mid])
        			end = mid-1;
        		else
        			start = mid+1;
        	}
        	else if(nums[start]>nums[mid]) //the right side is sorted
        	{
        		if(nums[mid]<target &&target<=nums[end])
        			start = mid+1;
        		else
        			end = mid-1;
        	}
        	else 
        	{
        	    start++;
        	}
        	
        }
        return false;
	    }
}public class Solution {
    public boolean search(int[] nums, int target) {
        if(nums==null)  return false;
        int start =0, end = nums.length-1;
         while(start<=end)
        {
        	int mid = (start+end)/2;
        	if(nums[mid]==target) return true;
        	//the idea is 'one half of the array is sorted and can use binary search to it'
        	if(nums[start]<nums[mid])  //the left side is sorted
        	{
        		if(nums[start]<=target &&target<nums[mid])
        			end = mid-1;
        		else
        			start = mid+1;
        	}
        	else if(nums[start]>nums[mid]) //the right side is sorted
        	{
        		if(nums[mid]<target &&target<=nums[end])
        			start = mid+1;
        		else
        			end = mid-1;
        	}
        	else 
        	{
        	    start++;
        	}
        	
        }
        return false;
	    }
}
