public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
        
       	List<Integer> list = new LinkedList<Integer>();
       	if(input==null||input.length()==0) return list;
	
       	int num = 0, i=0;
       	while(i<input.length() && input.charAt(i)<='9' && input.charAt(i)>='0') 
    	{
    		num = num*10+(input.charAt(i)-'0');
     		i++;
    	}
       	if(i==input.length()) {list.add(num); return list;}
    	for(; i<input.length(); i++)
    	{
    		char  op = input.charAt(i);
    		List<Integer> subList1 = diffWaysToCompute(input.substring(0,i));
    		List<Integer> subList2 = diffWaysToCompute(input.substring(i+1));
    		for(Integer int1 : subList1)
    		{
    			for(Integer int2 : subList2 )
    			{
    				if(op=='+')  list.add(int1+int2);
        			else if(op=='-')  list.add(int1-int2);
        			else if(op=='*')  list.add(int1*int2);
        			else if(op=='/')  list.add(int1/int2);
    			}
    		}
    		i++;
    		while(i<input.length() && input.charAt(i)<='9' && input.charAt(i)>='0') i++;
    		i--;
    	}
    	return list;
    }
}
