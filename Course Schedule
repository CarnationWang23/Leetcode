public class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
		if(prerequisites==null||prerequisites.length==0) return true;
		ArrayList[] preSets = new ArrayList[numCourses];
		for(int i=0; i<numCourses; i++)
		{
			preSets[i] = new ArrayList<Integer>();
		}
		for(int i=0; i<prerequisites.length; i++)
		{
			if(!preSets[prerequisites[i][1]].contains(prerequisites[i][0]))
			{
				preSets[prerequisites[i][1]].add(prerequisites[i][0]);
			}
		}
		boolean[] visited = new boolean[numCourses];
		for(int i = 0; i<numCourses; i++)
		{
			if(!dfs(preSets, i, visited))
				return false;
		}
		return true;
	}
	
	public boolean dfs(ArrayList[] preSets, int i, boolean[] visited)
	{
		if(visited[i]) return false;
		visited[i] = true;
		for(int j=0; j<preSets[i].size(); j++){
			if(!dfs(preSets, (int)preSets[i].get(j), visited))
				return false;
		}
		visited[i]=false;
		return true;
	}
}
