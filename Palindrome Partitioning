public class Solution {
    public List<List<String>> partition(String s){
		List<List<String>> re = new LinkedList<List<String>>();
		if(s==null||s.length()==0) return re;
		if(isPalindrome(s))
		{
			List<String> tls = new LinkedList<String>();
			tls.add(s);
			re.add(tls);
		}
		List<List<String>> subRe = null;
		for(int i=0; i<s.length(); i++)
		{
			if(isPalindrome(s.substring(i,s.length())))
			{
				subRe = partition(s.substring(0,i));
				for(List<String> ls : subRe)
				{
					ls.add(s.substring(i,s.length()));
					re.add(ls);
				}
			}
		}
		return re;
	}
	
	public boolean isPalindrome(String s)
	{
		int i=0, j=s.length()-1;
		while(i<j)
		{
			if(s.charAt(i)!=s.charAt(j)) 
				return false;
			i++;j--;
		}
		return true;
	}
}
