class DictionaryNode{
	DictionaryNode[] next;
	boolean isEnd;
	DictionaryNode(){
		next = new DictionaryNode[26];
		isEnd = false;
	}
}

public class WordDictionary {
	DictionaryNode root;
	
    public WordDictionary(){
    	root = new DictionaryNode();
    }
    // Adds a word into the data structure.
    public void addWord(String word) {
        if(word=="") return;
        DictionaryNode p = root;
        int i=0;
        for(; i<word.length(); i++)
        {
        	int index = word.charAt(i)-'a';
        	if(p.next[index]==null)
        		break;
        	p = p.next[index];
        }
        for(; i<word.length(); i++)
        {
        	DictionaryNode d = new DictionaryNode();
        	int index = word.charAt(i)-'a';
        	p.next[index] = d;
        	p = d;
        }
        p.isEnd = true;
    }

    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    public boolean search(String word) {
        return match(word, 0, root);
    }
    
    public boolean match(String word, int start, DictionaryNode p)
    {
    	if(start == word.length()) return p.isEnd;
    	if(word.charAt(start)!='.')
    	{
    		int index = word.charAt(start)-'a';
    		return p.next[index]!=null && match(word, start+1, p.next[index]);
    	}
    	else
    	{
    		for(int i=0; i<26; i++)
    			if(p.next[i]!=null && match(word, start+1, p.next[i]))
    				return true;
    	}
    	return false;
    }
}
