public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> list = new LinkedList<List<Integer>>();
        for(int i=0; i<candidates.length; i++)
        {
        	combinationHelper(candidates, i, target, new LinkedList<Integer>(), list);
        	while(i<candidates.length-1 && candidates[i]==candidates[i+1]) i++;
        }
        return list;
    }
    
    public void combinationHelper(int[] candidates, int start, int target, List<Integer> item, List<List<Integer>> list)
    {
        if(candidates[start]>target) return;
        else if(candidates[start]==target)
        {
            item.add(candidates[start]);
            list.add(item);
            return;
        }
        else{
            for(int i=start+1; i<candidates.length; i++)
            {
                List<Integer> tlist = new LinkedList<Integer>(item);
                tlist.add(candidates[start]);
                combinationHelper(candidates, i, target-candidates[start], tlist, list);
                while(i<candidates.length-1 && candidates[i]==candidates[i+1]) i++;
            }
        }
    }
}
