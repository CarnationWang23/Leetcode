public class Solution {
    public void solve(char[][] board)
	{
		if(board.length<2||board[0].length<2) return;
		int m = board.length, n = board[0].length;
		for(int i=0; i<m; i++)
		{
			if(board[i][0]=='O') findAdjacentO(board, i, 0);
			if(board[i][n-1]=='O') findAdjacentO(board, i, n-1);
		}
		for(int j=1; j<n-1; j++)
		{
			if(board[0][j]=='O') findAdjacentO(board, 0, j);
			if(board[m-1][j]=='O') findAdjacentO(board, m-1, j);
		}
		for(int i=0; i<m; i++)
		{
			for(int j=0; j<n; j++)
			{
				board[i][j]=(board[i][j]=='*')?'O':'X';
			}
		}
	}
	
	public void findAdjacentO(char[][] board, int i, int j)
	{
		int m = board.length, n = board[0].length;
		if(board[i][j]=='X') return;
		board[i][j]='*';
		if(j+1<n-1 && board[i][j+1]=='O')
		{
			findAdjacentO(board, i, j+1);
		}
		if(j-1>0 && board[i][j-1]=='O')
		{
			findAdjacentO(board, i, j-1);
		}
		if(i+1<m-1 && board[i+1][j]=='O')
		{
			findAdjacentO(board, i+1, j);
		}
		if(i-1>0 && board[i-1][j]=='O')
		{
			findAdjacentO(board, i-1, j);
		}
	}
}
