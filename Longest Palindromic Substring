public class Solution {
    public String longestPalindrome(String s) {
        StringBuilder sb = new StringBuilder();
        for(int i=0; i<s.length(); i++)
        {
        	sb.append('#');
            sb.append(s.charAt(i)) ;
            
        }
        sb = sb.deleteCharAt(0);
        int[] length = new int[sb.length()];
        int maxIndex = 0, max = 0;
        for(int i=0; i<sb.length(); i++)
        {
        	while(i-(length[i]+1)>=0&&i+(length[i]+1)<sb.length() && sb.charAt(i-(length[i]+1))==sb.charAt(i+(length[i]+1)))  length[i]++;
        	for(int j=1; j<=length[i]; j++)
        	{
        		if(i-j-length[i-j]>i-length[i])
        			length[i+j] = length[i-j];
        	}
        	if(length[i]>max||(length[i]==max&&(sb.charAt(maxIndex)=='#'&&max%2==0||sb.charAt(maxIndex)!='#'&&max%2==1)))
        	{
        		max = length[i];
        		maxIndex = i;
        	}
        	
        }
        StringBuilder sb2 = new StringBuilder();
        for(int i=maxIndex-max; i<=maxIndex+max; i++)
        {
        	if(sb.charAt(i)!='#') sb2.append(sb.charAt(i));
        }
        return sb2.toString();
    }
}
