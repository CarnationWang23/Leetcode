/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals.size() == 0){
            return intervals;
        }
        Collections.sort(intervals, (a,b)->(a.start-b.start));
        List<Interval> re = new LinkedList<Interval>();
        re.add(intervals.get(0));
        Interval latest;
        for(int i=1; i<intervals.size(); i++){
            latest = re.get(re.size()-1);
            if(intervals.get(i).start > latest.end){
                re.add(intervals.get(i));
                latest = intervals.get(i);
            }else{
                if(intervals.get(i).end > latest.end){
                    latest.end = intervals.get(i).end;
                }
            }
        }
        return re;
    }
}
