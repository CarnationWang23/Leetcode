/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    HashMap<Integer, UndirectedGraphNode> map = new HashMap<Integer, UndirectedGraphNode>();
	public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
		if(node==null) return null;
		if(map.containsKey(node.label)) return map.get(node.label);
		UndirectedGraphNode re = new UndirectedGraphNode(node.label);
		map.put(node.label, re);
		for(UndirectedGraphNode gnode : node.neighbors)
		{
			re.neighbors.add(cloneGraph(gnode));
		}
		return re;
    }
}
